{"version":3,"sources":["Header.tsx","Main.tsx","Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","className","href","target","rel","Main","style","backgroundImage","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MA8CeA,G,KA3CA,kBACb,4BAAQC,UAAU,UAChB,wBAAIA,UAAU,MACZ,0BAAMA,UAAU,kBAAhB,aAEA,0BAAMA,UAAU,8BACd,2CACA,yDACA,0BAAMA,UAAU,aAAhB,kBACA,0BAAMA,UAAU,aAAhB,gCAIJ,6BAASA,UAAU,iBACjB,uBAAGA,UAAU,MACX,0BAAMA,UAAU,aAAhB,6BACA,0BAAMA,UAAU,aAAY,0BAAMA,UAAU,UAAhB,YAA5B,aACA,0BAAMA,UAAU,aACd,0BAAMA,UAAU,UAAhB,oCACA,uBAAGC,KAAK,8CAA8CC,OAAO,SAASC,IAAI,uBAA1E,wDAIJ,wBAAIH,UAAU,qDACZ,4BACE,8BAAM,0BAAMA,UAAU,UAAhB,gBAAN,SACA,8BAAM,uBAAGC,KAAK,4BAAR,yBAAsD,0CAE9D,4BACE,mDACA,8BAAM,uBAAGA,KAAK,4BAAR,iBAAiD,uCAAjD,OAER,4BACE,8BAAM,0BAAMD,UAAU,UAAhB,YAAN,aACA,8BAAM,0BAAMA,UAAU,SAAhB,UAAN,6BAIJ,kCC9BSI,EARF,kBACX,0BAAMJ,UAAU,aACd,4BAAQA,UAAU,iBAAiBK,MAAO,CAAEC,gBAAiB,+BAC7D,4BAAQN,UAAU,iBAAiBK,MAAO,CAAEC,gBAAiB,+BAC7D,4BAAQN,UAAU,iBAAiBK,MAAO,CAAEC,gBAAiB,iCC4BlDC,EAhCA,kBACb,4BAAQP,UAAU,oBAChB,wBAAIA,UAAU,qDACZ,4BACE,8BAAM,gDAAN,4BACA,wDAEF,4BACE,uBAAGC,KAAK,gDAAR,UACA,0BAAMD,UAAU,aAAhB,sBAEF,4BACE,uBAAGC,KAAK,6DAAR,UACA,0BAAMD,UAAU,aAAhB,sBAEF,4BACE,uBAAGC,KAAK,8BAAR,UACA,0BAAMD,UAAU,aAAhB,sBAEF,4BACE,uBAAGC,KAAK,gCAAR,aAIJ,uBAAGD,UAAU,0BACX,uCACA,8EACA,oDCdSQ,EAVO,WACpB,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.82554ed4.chunk.js","sourcesContent":["// Ceane Lamerez © 2020\nimport React from 'react'\n\nconst Header = () => (\n  <header className=\"header\">\n    <h1 className=\"m0\">\n      <span className=\"color__cinemaZ\">Ceane La.</span>\n\n      <span className=\"focus explorable color__db\">\n        <span>&nbsp;/&nbsp;</span>\n        <span>Software Engineer & CEO</span>\n        <span className=\"color__f6\">/ &#20320;&#22909;</span >\n        <span className=\"color__f6\">/ &#50668;&#48372;&#49464;&#50836;</span >\n      </span>\n    </h1>\n    \n    <section className=\"list-grid py1\">\n      <p className=\"m0\">\n        <span className=\"color__97\">San Francisco, California</span>\n        <span className=\"color__db\"><span className=\"m-hide\">&nbsp;&nbsp;</span >/&nbsp;&nbsp;</span>\n        <span className=\"color__db\">\n          <span className=\"nowrap\">&#127932; Listening to &ndash;</span>\n          <a href=\"https://www.youtube.com/watch?v=3JrDhzPoLkU\" target=\"_blank\" rel=\"noopener noreferrer\">Hoody (&#54980;&#46356;) - '&#50504;&#45397;&#55176; (Adios)</a>\n        </span>\n      </p >\n      \n      <ul className=\"list-style-none inline inline-all p0 m0 color__db\">\n        <li>\n          <span><span className=\"m-hide\">&nbsp;&nbsp;&nbsp;</span >/&nbsp;</span>\n          <span><a href=\"https://ceane.github.io/\">&#127765; Nocturnal<sup>&trade;</sup></a></span>\n        </li>\n        <li>\n          <span>&nbsp;&nbsp;/&nbsp;&nbsp;</span>\n          <span><a href=\"https://ceane.github.io/\">What's a Focus<sup>&trade;</sup>?</a></span>\n        </li>\n        <li>\n          <span><span className=\"m-hide\">&nbsp;&nbsp;</span>/&nbsp;&nbsp;</span>\n          <span><span className=\"block\">&#9632;</span> from Ceane Corporation</span>\n        </li>\n      </ul>\n\n      <div></div>\n    </section>\n  </header>\n)\n\nexport default Header\n","// Ceane Lamerez © 2020\nimport React from 'react'\n\nconst Main = () => (\n  <main className=\"main-grid\">\n    <figure className=\"display__image\" style={{ backgroundImage: 'url(images/display/1.jpg)' }} />\n    <figure className=\"display__image\" style={{ backgroundImage: 'url(images/display/2.jpg)' }} />\n    <figure className=\"display__image\" style={{ backgroundImage: 'url(images/display/3.jpg)' }} />\n  </main>\n)\n\nexport default Main\n","// Ceane Lamerez © 2020\nimport React from 'react'\n\nconst Footer = () => (\n  <footer className=\"list-grid footer\">\n    <ul className=\"list-style-none inline inline-all color__db p0 m0\">\n      <li>\n        <span><span>&#9632;&nbsp;&nbsp;</span> Ceane Lamerez &copy; 2020</span>\n        <span>&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;</span>\n      </li>\n      <li>\n        <a href=\"https://github.com/ceanela/ceanela.github.io\">Growth</a>\n        <span className=\"color__db\">&nbsp;&nbsp;/&nbsp;&nbsp;</span>\n      </li>\n      <li>\n        <a href=\"https://www.dropbox.com/s/l0dkodx1944wx5u/Resume.pdf?dl=0\">Resume</a>\n        <span className=\"color__db\">&nbsp;&nbsp;/&nbsp;&nbsp;</span>\n      </li>\n      <li>\n        <a href=\"https://github.com/ceanela\">Github</a>\n        <span className=\"color__db\">&nbsp;&nbsp;/&nbsp;&nbsp;</span>\n      </li>\n      <li>\n        <a href=\"https://twitter.com/ceaneceo\">Twitter</a>\n      </li>\n    </ul>\n\n    <p className=\"color__db pl1 m0 m-mt1\">\n      <span>>&nbsp;</span>\n      <q>The mind is an infinite realm of possibilities.</q>\n      <span>&nbsp;/&nbsp; Ceane</span>\n    </p>\n  </footer>\n)\n\nexport default Footer","// Ceane Lamerez © 2020\nimport React from 'react'\nimport Header from './Header'\nimport Main from './Main'\nimport Footer from './Footer'\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <Header />\n      <Main />\n      <Footer />\n    </>\n  )\n}\n\nexport default App\n","// Ceane Lamerez © 2020\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Ceane Lamerez © 2020\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}